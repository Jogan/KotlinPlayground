ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    // Only run the method counter on CI
    runOnEachPackage = ci
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.jogan.kotlinplayground"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    lintOptions {
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}"

    implementation "android.arch.lifecycle:extensions:${versions.arch_comp}"
    implementation "android.arch.lifecycle:reactivestreams:${versions.arch_comp}"
    kapt "android.arch.lifecycle:compiler:${versions.arch_comp}"

    implementation "android.arch.paging:runtime:${versions.arch_comp_paging}"

    implementation "android.arch.persistence.room:runtime:${versions.room}"
    implementation "android.arch.persistence.room:rxjava2:${versions.room}"
    kapt "android.arch.persistence.room:compiler:${versions.room}"

    implementation "com.android.support:support-annotations:${versions.support_library}"
    implementation "com.android.support:appcompat-v7:${versions.support_library}"
    implementation "com.android.support:design:${versions.support_library}"
    implementation "com.android.support:customtabs:${versions.support_library}"
    implementation "com.android.support.constraint:constraint-layout:${versions.constraint_layout}"

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rxkotlin}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"

    implementation 'com.squareup.moshi:moshi:1.5.0'
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    implementation "com.github.bumptech.glide:glide:4.4.0"

    implementation "com.xwray:groupie:2.0.0"

    implementation 'com.jakewharton.timber:timber:4.6.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${versions.espresso}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    debugImplementation "nl.littlerobots.rxlint:rxlint:${versions.rxlint}"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakcanary}"
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
