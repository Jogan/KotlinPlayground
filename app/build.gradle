ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    // Only run the method counter on CI
    runOnEachPackage = ci
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        applicationId "com.jogan.kotlinplayground"
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'com.jogan.kotlinplayground.test.TestRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    lintOptions {
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations.all {
    resolutionStrategy {
        force Plugins.kotlinStdLib
    }
}

dependencies {
    implementation Plugins.kotlinStdLib

    implementation Deps.androidKtx

    implementation Deps.supportAnnotation
    implementation Deps.supportAppCompat
    implementation Deps.supportDesign
    implementation Deps.supportRecyclerView
    implementation Deps.supportConstraintLayout

    implementation Deps.androidArchLifecycleRuntime
    implementation Deps.androidArchLifecycleExtensions
    implementation Deps.androidArchLifecycleRx
    implementation Deps.androidArchPaging
    kapt Deps.androidArchLifecycleCompiler
    implementation Deps.androidArchRoom
    implementation Deps.androidArchRoomRx
    kapt Deps.androidArchRoomCompiler

    implementation Deps.daggerAndroid
    implementation Deps.daggerAndroidSupport
    kapt Deps.daggerCompiler
    kapt Deps.daggerAndroidProcessor

    implementation Deps.rxKotlin
    implementation Deps.rxAndroid
    implementation Deps.rxBindingKotlin
    implementation Deps.rxBindingSupport

    implementation "javax.inject:javax.inject:${rootProject.javaxInjectVersion}"

    implementation "com.squareup.moshi:moshi:${rootProject.moshiVersion}"
    implementation "com.squareup.okhttp3:okhttp:${rootProject.okHttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.okHttpVersion}"
    implementation "com.squareup.retrofit2:retrofit:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.retrofitVersion}"

    implementation "com.github.bumptech.glide:glide:${rootProject.glideVersion}"

    implementation "com.xwray:groupie:${rootProject.groupieVersion}"
    implementation "com.xwray:groupie-kotlin-android-extensions:${rootProject.groupieVersion}"

    implementation "com.jakewharton.timber:timber:${rootProject.timberVersion}"

    debugImplementation "nl.littlerobots.rxlint:rxlint:${rootProject.rxLintVersion}"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.leakCanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.leakCanaryVersion}"

    // Unit test dependencies
    testImplementation "junit:junit:${rootProject.jUnitVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${rootProject.kotlinVersion}"
    testImplementation "com.nhaarman:mockito-kotlin:${rootProject.mockitoKotlinVersion}"
    testImplementation "org.assertj:assertj-core:${rootProject.assertJVersion}"
    testImplementation "org.robolectric:robolectric:${rootProject.robolectricVersion}"
    testImplementation "android.arch.core:core-testing:${rootProject.archComponentsVersion}"

    // Instrumentation test dependencies
    androidTestImplementation "junit:junit:${rootProject.jUnitVersion}"
    androidTestImplementation "com.nhaarman:mockito-kotlin:${rootProject.mockitoKotlinVersion}"
    androidTestImplementation "org.mockito:mockito-android:${rootProject.mockitoAndroidVersion}"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${rootProject.espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test:runner:${rootProject.runnerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test:rules:${rootProject.runnerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-intents:${rootProject.espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:${rootProject.espressoVersion}") {
        exclude module: 'appcompat'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }

    kaptTest "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"
    kaptAndroidTest "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
